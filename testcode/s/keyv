
        AREA    |Test$$Code|, CODE

        GET     hdr.swis
        GET     hdr.macros
        GET     hdr.printmacros

; vector
KeyV * &13

; reasons
KeyV_Released * 1
KeyV_Pressed * 2

; codes
KeyV_LShift * 76
KeyV_CapsLock * 93
KeyV_P * 48
KeyV_1 * 17
KeyV_Tab * 38
KeyV_F1 * 1
KeyV_CursorUp * 89


insert_keyv      ROUT
        Push    "lr"
        MOV     r8, r1
10
        ADR     lr, %BT10
        LDRB    r0, [r8], #1
        TEQ     r0, #'s'
        BEQ     press_lshift
        TEQ     r0, #'c'
        BEQ     press_capslock
        TEQ     r0, #'C'
        BEQ     release_capslock
        TEQ     r0, #'p'
        BEQ     press_p
        TEQ     r0, #'P'
        BEQ     release_p
        TEQ     r0, #'t'
        BEQ     press_tab
        TEQ     r0, #'f'
        BEQ     press_f1
        TEQ     r0, #'u'
        BEQ     press_cursorup
        TEQ     r0, #'1'
        BEQ     press_1
        TEQ     r0, #'d'
        BEQ     inkey_delay_short
        TEQ     r0, #'l'
        BEQ     inkey_delay_long
        TEQ     r0, #'m'
        BEQ     inkey_delay_medium
        CMP     r0, #'r'
        BEQ     readc
        CMP     r0, #'z'
        BEQ     set_state
        CMP     r0, #'-'
        CMPNE   r0, #'+'
        BEQ     enable_disable_keyboard
        CMP     r0, #32
        BLS     %FT99

        PrintLine "Syntax: keyv {[spw]}*"
        PrintLine "  s = press shift"
        PrintLine "  c = press caps lock"
        PrintLine "  p = press p"
        PrintLine "  1 = press 1"
        PrintLine "  t = press tab"
        PrintLine "  f = press f1"
        PrintLine "  u = press cursor up"
        PrintLine "  d = INKEY(4)  [short]"
        PrintLine "  m = INKEY(12) [medium]"
        PrintLine "  l = INKEY(35) [long]"
        PrintLine "  r = GET"
        PrintLine "  - = disable KeyV input"
        PrintLine "  + = enable KeyV input"
        PrintLine "  zc<state> = Set cursors state with *FX 4"
99
        Pull    "pc"


readc SIGNATURE
        MOV     r0, #65
        SUBS    r0, r0, #1              ; set the carry flag
        SWI     OS_ReadC
        BCC     %FT10
        SWI     OS_WriteS
        =       "Carry set on exit (means an escape condition)", 0
        SWI     OS_NewLine
10
        MOV     r1, r0

        ADR     r0, message
        SWI     OS_Write0

        MOV     r0, r1
        SWI     OS_WriteC
        SWI     OS_NewLine
        MOV     pc, lr

message
        = "You pressed ", 0
        ALIGN

enable_disable_keyboard SIGNATURE
; => r0 = '-' to disable, '+' to enable
        EOR     r1, r0, #'+'            ; - => 6, + => 0
        MOV     r0, #201                ; Keyboard disable
        MOV     r2, #0                  ; write
        SWI     OS_Byte
        MOV     pc, lr

press_p SIGNATURE
        MOV     r0, #KeyV_P
        B       press
release_p SIGNATURE
        MOV     r0, #KeyV_P
        B       release
press_1 SIGNATURE
        MOV     r0, #KeyV_1
        B       press
press_tab SIGNATURE
        MOV     r0, #KeyV_Tab
        B       press
press_f1 SIGNATURE
        MOV     r0, #KeyV_F1
        B       press
press_cursorup SIGNATURE
        MOV     r0, #KeyV_CursorUp
        B       press
press_lshift SIGNATURE
        MOV     r0, #KeyV_LShift
        B       press
press_capslock SIGNATURE
        MOV     r0, #KeyV_CapsLock
        B       press
release_capslock SIGNATURE
        MOV     r0, #KeyV_CapsLock
        B       release

press SIGNATURE
        MOV     r1, r0
        MOV     r0, #KeyV_Pressed
        MOV     r9, #KeyV
        SWI     OS_CallAVector
        MOV     pc, lr

release SIGNATURE
        MOV     r1, r0
        MOV     r0, #KeyV_Released
        MOV     r9, #KeyV
        SWI     OS_CallAVector
        MOV     pc, lr

inkey_delay_short SIGNATURE
        MOV     r1, #4
        B       inkey_delay

inkey_delay_medium SIGNATURE
        MOV     r1, #12
        B       inkey_delay

inkey_delay_long SIGNATURE
        MOV     r1, #35
        B       inkey_delay

inkey_delay SIGNATURE
        Push    "lr"
        PrintMessage "INKEY("
        PrintInteger r1
        PrintMessage "): "

        MOV     r0, #&81
        MOV     r2, #0
        SWI     OS_Byte
        TEQ     r2, #0
        BEQ     %FT30                   ; key was pressed

        PrintLine "Nothing pressed"
        Pull    "pc"

30
        PrintMessage "Pressed "
        SUBS    r0, r1, #32
        CMP     r0, #127-32
        MOVHS   r0, #'?'
        MOVLO   r0, r1
        SWI     OS_WriteC
        SWI     OS_WriteI + 32
        PrintInteger r1
        SWI     OS_NewLine
        Pull    "pc"


set_state SIGNATURE
        Push    "lr"
        LDRB    r0, [r8], #1
        TEQ     r0, #'c'
        BNE     %FT99

        BL      get_number

        PrintMessage "*FX 4, "
        PrintInteger r0
        SWI     OS_NewLine

        MOV     r1, r0
        XSWI    OS_Byte, #4
        B       %FT99

90
        PrintLine "ERROR: Argument to 'set state' not recognised"
99
        Pull    "pc"

        GET     s._args_common

        END
