
        AREA    |Test$$Code|, CODE

        GET     hdr.swis
        GET     hdr.printmacros
        GET     hdr.macros

OSMemoryReason_ReadPhysicalTableSize * 6
OSMemoryReason_ReadPhysicalTable * 7
OSMemoryReason_Amounts * 8
OSMemoryReason_IOSpace * 9

OSMemoryReason_Amounts_DRAM * 0x100
OSMemoryReason_Amounts_VRAM * 0x200
OSMemoryReason_Amounts_ROM * 0x300
OSMemoryReason_Amounts_IOSpace * 0x400
OSMemoryReason_Amounts_SoftROM * 0x500


physical_table_size  * 1024 * 128               ; enough for 512 MiB?


memoryinfo     ROUT
        LDRB    r0, [r1], #1
        TEQ     r0, #'a'
        BEQ     memory_amounts
        TEQ     r0, #'t'
        BEQ     memory_table
        TEQ     r0, #'c'
        BEQ     memory_controllers

        PrintLine "Syntax: memoryinfo [atc]"
        PrintLine "  a = memory amounts"
        PrintLine "  t = memory table"
        PrintLine "  c = memory controller info"
        SWI     XOS_Exit


memory_amounts SIGNATURE
        PrintLine "Amount of memory:"

        MACRO
        ShowMemory $type
        LDR     r0, =$type + OSMemoryReason_Amounts
        XSWI    OS_Memory
        MUL     r3, r1, r2

        PrintMessage " #"
        MOV     r0, r0, LSR #8
        PrintInteger r0, 3
        PrintMessage "$type", 34
        PrintInteger r1, 4
        PrintMessage " pages, "
        MOV     r3, r3, LSR #10
        PrintInteger r3, 5
        PrintMessage " K"
        SWI     OS_NewLine
        MEND

        ShowMemory OSMemoryReason_Amounts_DRAM
        ShowMemory OSMemoryReason_Amounts_VRAM
        ShowMemory OSMemoryReason_Amounts_ROM
        ShowMemory OSMemoryReason_Amounts_IOSpace
        ShowMemory OSMemoryReason_Amounts_SoftROM

        MOV     pc, lr

        LTORG


memory_table SIGNATURE
; Note: This seems to crash on Gerph's Select, writing beyond the RMA.
        PrintLine "Physical memory table:"

        XSWI    OS_Memory, OSMemoryReason_ReadPhysicalTableSize

        PrintMessage "Table size: "
        PrintInteger r1
        SWI     OS_NewLine

        PrintMessage "Page size:  "
        PrintInteger r2
        SWI     OS_NewLine

; allocate space
        Push    "r0, r1"
        MOV     r0, #6
        MOV     r3, #physical_table_size        ; we always allocate the same table so we get the same results
        XSWI    OS_Module
        Pull    "r0, r1"
; r2-> the buffer now

        MOV     r3, r1
        CMP     r3, #physical_table_size
        BHI     %FT90                           ; physical table is too big for us here

        MOV     r1, r2
        XSWI    OS_Memory, OSMemoryReason_ReadPhysicalTable

        PrintLine "Table:"

        MOV     r4, #0                          ; page number
        ADR     r5, table_chars

table_row_size * 64                             ; 64 pages = 4K * 64 = 256 K per row

; start a row
10
        PrintInteger r4, 8
        PrintMessage ": "
        MOV     r7, #0                          ; counter in the row

        MACRO
        ShowTableNibble $reg
        AND     r8, $reg, #15
        LDRB    r0, [r5, r8]
        SWI     OS_WriteC
        MEND

20
        CMP     r4, r3, LSL #1                  ; have we reached the end of the list
        BHS     %FT60

; we always report 2 values - assume that the table is even in length
        LDRB    r6, [r1], #1
        ShowTableNibble r6
        MOV     r6, r6, LSR #4
        ShowTableNibble r6

        ADD     r4, r4, #2
        ADD     r7, r7, #2
        CMP     r7, #table_row_size
        BLO     %BT20

60
        SWI     OS_NewLine

        CMP     r4, r3, LSL #1                  ; have we reached the end of the list
        BLO     %BT10

90
        MOV     pc, lr


table_chars
; allocatable memory (caps if it's available)
        =       '?'                             ; allocatable but no memory ?
        =       'D'                             ; DRAM
        =       'V'                             ; VRAM
        =       'R'                             ; ROM
        =       'I'                             ; I/O page
        =       '5'                             ; undefined
        =       '6'                             ; undefined
        =       '7'                             ; undefined
; unallocatable memory (lower if unavailable)
        =       '.'                             ; no memory
        =       'd'                             ; DRAM
        =       'v'                             ; VRAM
        =       'r'                             ; ROM
        =       'i'                             ; I/O page
        =       '%'                             ; undefined (shifted versions of the others)
        =       '^'                             ; undefined
        =       '&'                             ; undefined
        ALIGN


memory_controllers SIGNATURE
        PrintLine "Controller logical bases:"

        MOV     r7, #0
10
        PrintMessage "Controller "
        PrintInteger r7, 3
        PrintMessage ": "

        MOV     r1, r7, LSL #8
        XSWI    XOS_Memory, OSMemoryReason_IOSpace
        BVC     %FT30

        PrintError
        B       %FT50

30
        TEQ     r1, #0
        BNE     %FT40
        PrintMessage "None"
        B       %FT50

40
        PrintMessage "at "
        PrintHex r1

50
        SWI     OS_NewLine

        ADD     r7, r7, #1
        TEQ     r7, #8
        MOVEQ   r7, #32
        TEQ     r7, #35
        BNE     %BT10

        MOV     pc, lr

        END
